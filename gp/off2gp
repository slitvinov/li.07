#!/usr/bin/awk -f

function nxt() {
    rc = getline l < f
    if (rc <= 0) err("error reading file: " f)
}
# split into words
function spl() { split(l, w)}

function vert(   i) {
    for (i = 0; i < nv; i++) {
	nxt(); spl()
	x[i] = w[X]; y[i] = w[Y]; z[i] = w[Z]
    }
}

function face(   i) {
    for (i = 0; i < nf; i++) {
	nxt(); spl()
	a[i] = w[A]; b[i] = w[B]; c[i] = w[C]
    }
}
function read () {
    nxt()
    if (l != "OFF") err("not off file: " f)
    nxt(); spl(); nv = w[1]; nf = w[2]

    vert()
    face()
}
function tri(a, b, c) {
    if (!NextTri) NextTri = 1
    else           printf "\n\n"
    xa = x[a]; ya = y[a]; za = z[a]
    xb = x[b]; yb = y[b]; zb = z[b]
    xc = x[c]; yc = y[c]; zc = z[c]
    print xa, ya, za
    print xb, yb, zb
    printf "\n"
    print xc, yc, zc
    print xc, yc, zc

}
function edge0(i, j,   xi, yi, zi, xj, yj, zj) {
    xi = x[i]; yi = y[i]; zi = z[i]
    xj = x[j]; yj = y[j]; zj = z[j]
    print xi, yi, zi, xj - xi, yj - yi, zj - zi
}
function edge(i, j) {
    if ((i, j) in E) return
    if ((j, i) in E) return
    edge0(i, j)
    E[i, j]
}
function vector(ia, ib, ic) {
    edge(ia, ib)
    edge(ib, ic)
    edge(ic, ia)
}

function write(   i) {
    for (i = 0; i < nf; i++) {
	ia = a[i]; ib = b[i]; ic = c[i]
	if (Vector) vector(ia, ib, ic)
	else        tri(ia, ib, ic)
    }
}
function ini() {
    # indices
    X = 1; Y = 2; Z = 3
    A = 2; B = 3; C = 4 # for faces
}
BEGIN {
    ini()
    f = ARGV[1]
    read()
    write()
}

function err(s) { msg(s); exit(2)     }
function msg(s) { print s | "cat >&2" }
